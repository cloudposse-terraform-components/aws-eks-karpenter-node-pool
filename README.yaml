name: "aws-eks-karpenter-node-pool"
# Canonical GitHub repo
github_repo: "cloudposse-terraform-components/aws-eks-karpenter-node-pool"
# Short description of this project
description: |-
  This component deploys [Karpenter NodePools](https://karpenter.sh/docs/concepts/nodepools/) to an EKS cluster.

  Karpenter is still in v0 and rapidly evolving. At this time, this component only supports a subset of the features
  available in Karpenter. Support could be added for additional features as needed.

  Not supported:

  - Elements of NodePool:
    - [`template.spec.kubelet`](https://karpenter.sh/docs/concepts/nodepools/#spectemplatespeckubelet)
    - [`limits`](https://karpenter.sh/docs/concepts/nodepools/#limits) currently only supports `cpu` and `memory`. Other
      limits such as `nvidia.com/gpu` are not supported.
  - Elements of NodeClass:
    - `subnetSelectorTerms`. This component only supports selecting all public or all private subnets of the referenced
      EKS cluster.
    - `securityGroupSelectorTerms`. This component only supports selecting the security group of the referenced EKS
      cluster.
    - `amiSelectorTerms`. Such terms override the `amiFamily` setting, which is the only AMI selection supported by this
      component.
    - `instanceStorePolicy`
    - `userData`
    - `detailedMonitoring`
    - `associatePublicIPAddress`
usage: |-
  **Stack Level**: Regional

  If provisioning more than one NodePool, it is
  [best practice](https://aws.github.io/aws-eks-best-practices/karpenter/#creating-nodepools) to create NodePools that are
  mutually exclusive or weighted.

  ```yaml
  components:
    terraform:
      eks/karpenter-node-pool:
        settings:
          spacelift:
            workspace_enabled: true
        vars:
          enabled: true
          eks_component_name: eks/cluster
          name: "karpenter-node-pool"
          # https://karpenter.sh/v0.36.0/docs/concepts/nodepools/
          node_pools:
            default:
              name: default
              # Whether to place EC2 instances launched by Karpenter into VPC private subnets. Set it to `false` to use public subnets
              private_subnets_enabled: true
              disruption:
                consolidation_policy: WhenUnderutilized
                consolidate_after: 1h
                max_instance_lifetime: 336h
                budgets:
                  # This budget allows 0 disruptions during business hours (from 9am to 5pm) on weekdays
                  - schedule: "0 9 * * mon-fri"
                    duration: 8h
                    nodes: "0"
              # The total cpu of the cluster. Maps to spec.limits.cpu in the Karpenter NodeClass
              total_cpu_limit: "100"
              # The total memory of the cluster. Maps to spec.limits.memory in the Karpenter NodeClass
              total_memory_limit: "1000Gi"
              # The weight of the node pool. See https://karpenter.sh/docs/concepts/scheduling/#weighted-nodepools
              weight: 50
              # Taints to apply to the nodes in the node pool. See https://karpenter.sh/docs/concepts/nodeclasses/#spectaints
              taints:
                - key: "node.kubernetes.io/unreachable"
                  effect: "NoExecute"
                  value: "true"
              # Taints to apply to the nodes in the node pool at startup. See https://karpenter.sh/docs/concepts/nodeclasses/#specstartuptaints
              startup_taints:
                - key: "node.kubernetes.io/unreachable"
                  effect: "NoExecute"
                  value: "true"
              # Metadata options for the node pool. See https://karpenter.sh/docs/concepts/nodeclasses/#specmetadataoptions
              metadata_options:
                httpEndpoint: "enabled" # allows the node to call the AWS metadata service
                httpProtocolIPv6: "disabled"
                httpPutResponseHopLimit: 2
                httpTokens: "required"
              # The AMI used by Karpenter provisioner when provisioning nodes. Based on the value set for amiFamily, Karpenter will automatically query for the appropriate EKS optimized AMI via AWS Systems Manager (SSM)
              # Bottlerocket, AL2, Ubuntu
              # https://karpenter.sh/v0.18.0/aws/provisioning/#amazon-machine-image-ami-family
              ami_family: AL2
              # Karpenter provisioner block device mappings.
              block_device_mappings:
                - deviceName: /dev/xvda
                  ebs:
                    volumeSize: 200Gi
                    volumeType: gp3
                    encrypted: true
                    deleteOnTermination: true
              # Set acceptable (In) and unacceptable (Out) Kubernetes and Karpenter values for node provisioning based on
              # Well-Known Labels and cloud-specific settings. These can include instance types, zones, computer architecture,
              # and capacity type (such as AWS spot or on-demand).
              # See https://karpenter.sh/v0.18.0/provisioner/#specrequirements for more details
              requirements:
                - key: "karpenter.sh/capacity-type"
                  operator: "In"
                  values:
                    - "on-demand"
                    - "spot"
                - key: "node.kubernetes.io/instance-type"
                  operator: "In"
                  # See https://aws.amazon.com/ec2/instance-explorer/ and https://aws.amazon.com/ec2/instance-types/
                  # Values limited by DenyEC2InstancesWithoutEncryptionInTransit service control policy
                  # See https://github.com/cloudposse/terraform-aws-service-control-policies/blob/master/catalog/ec2-policies.yaml
                  # Karpenter recommends allowing at least 20 instance types to ensure availability.
                  values:
                    - "c5n.2xlarge"
                    - "c5n.xlarge"
                    - "c5n.large"
                    - "c6i.2xlarge"
                    - "c6i.xlarge"
                    - "c6i.large"
                    - "m5n.2xlarge"
                    - "m5n.xlarge"
                    - "m5n.large"
                    - "m5zn.2xlarge"
                    - "m5zn.xlarge"
                    - "m5zn.large"
                    - "m6i.2xlarge"
                    - "m6i.xlarge"
                    - "m6i.large"
                    - "r5n.2xlarge"
                    - "r5n.xlarge"
                    - "r5n.large"
                    - "r6i.2xlarge"
                    - "r6i.xlarge"
                    - "r6i.large"
                - key: "kubernetes.io/arch"
                  operator: "In"
                  values:
                    - "amd64"
  ```
references:
  - name: "https://karpenter.sh"
    description: ""
    url: "https://karpenter.sh"
  - name: "https://aws.github.io/aws-eks-best-practices/karpenter"
    description: ""
    url: "https://aws.github.io/aws-eks-best-practices/karpenter"
  - name: "https://karpenter.sh/docs/concepts/nodepools"
    description: ""
    url: "https://karpenter.sh/docs/concepts/nodepools"
  - name: "https://aws.amazon.com/blogs/aws/introducing-karpenter-an-open-source-high-performance-kubernetes-cluster-autoscaler"
    description: ""
    url: "https://aws.amazon.com/blogs/aws/introducing-karpenter-an-open-source-high-performance-kubernetes-cluster-autoscaler"
  - name: "https://github.com/aws/karpenter"
    description: ""
    url: "https://github.com/aws/karpenter"
  - name: "https://ec2spotworkshops.com/karpenter.html"
    description: ""
    url: "https://ec2spotworkshops.com/karpenter.html"
  - name: "https://www.eksworkshop.com/docs/autoscaling/compute/karpenter/"
    description: ""
    url: "https://www.eksworkshop.com/docs/autoscaling/compute/karpenter/"
tags:
  - component/eks/karpenter-node-pool
  - layer/eks
  - provider/aws
  - provider/helm
# Categories of this project
categories:
  - component/eks/karpenter-node-pool
  - layer/eks
  - provider/aws
  - provider/helm
# License of this project
license: "APACHE2"
# Badges to display
badges:
  - name: Latest Release
    image: https://img.shields.io/github/release/cloudposse-terraform-components/aws-eks-karpenter-node-pool.svg?style=for-the-badge
    url: https://github.com/cloudposse-terraform-components/aws-eks-karpenter-node-pool/releases/latest
  - name: Slack Community
    image: https://slack.cloudposse.com/for-the-badge.svg
    url: https://slack.cloudposse.com
related:
  - name: "Cloud Posse Terraform Modules"
    description: Our collection of reusable Terraform modules used by our reference architectures.
    url: "https://docs.cloudposse.com/modules/"
  - name: "Atmos"
    description: "Atmos is like docker-compose but for your infrastructure"
    url: "https://atmos.tools"
contributors: [] # If included generates contribs
